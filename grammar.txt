statements				: SEMICOLON* statement (SEMICOLON* statement)* SEMICOLON* 

statement 				: KEYWORD:RETURN expr? SEMICOLON 
						: KEYWORD:BREAK SEMICOLON
						: KEYWORD:CONTINUE SEMICOLON
						: expr SEMICOLON 
						: if-stm  
						: for-stm
						: while-stm
						: funcdef-stm

if-stm					: KEYWORD:IF LPAREN expr RPAREN body 
							(KEYWORD:ELIF LPAREN expr RPAREN body)*
							(KEYWORD:ELSE body)?

for-stm					: KEYWORD:FOR LPAREN expr SEMICOLON expr SEMICOLON expr RPAREN body

while-stm				: KEYWORD:WHILE LPAREN expr RPAREN body

funcdef-stm				: KEYWORD:FUNCDEF IDENTIFIER LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN body

expr 					: comp-expr (KEYWORD:(AND|OR|XOR) comp-expr)* 
						: KEYWORD:(INT|DOUBLE|STRING|LIST|FUNC) IDENTIFIER (EQUALS expr)?  
						: IDENTIFIER EQUALS expr 
 
comp-expr				: KEYWORD:NOT comp-expr 
						: arith-expr ((DEQUALS|NEQUALS|LESS|GREATER|GEQUALS|LEQUALS) arith-expr)*

arith-expr				: term ((PLUS|MINUS) term)*

term					: factor ((MUL|DIV|MOD) factor)*

factor					: (PLUS|MINUS)* factor
						: power

power					: call (POW factor)*

call					: atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom					: INT|DOUBLE|STRING|IDENTIFIER
						: LPAREN expr RPAREN
						: list-expr

list-expr				: LSQUARE (expr (COMMA expr)*)? RSQUARE

body					: LCURLY statements RCURLY
						: statement
						: SEMICOLON