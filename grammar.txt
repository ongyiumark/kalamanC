statements				: SEMICOLON* statement (SEMICOLON* statement)* SEMICOLON* 

statement 				: KEYWORD:RETURN expr? SEMICOLON //
						: KEYWORD:BREAK SEMICOLON//
						: KEYWORD:CONTINUE SEMICOLON//
						: expr SEMICOLON 
						: KEYWORD:(INT|DOUBLE|STRING|LIST|FUNC) IDENTIFIER (EQUALS expr)? SEMICOLON 
						: IDENTIFIER EQUALS expr SEMICOLON //
						: if-stm SEMICOLON //

expr 					: comp-expr (KEYWORD:(AND|OR|XOR) comp-expr)* 

comp-expr				: KEYWORD:NOT comp-expr 
						: arith-expr ((EQUALS|NEQUALS|LESS|GREATER|GEQUALS|LEQUALS) arith-expr)*

arith-expr				: term ((PLUS|MINUS) term)*

term					: factor ((MUL|DIV|MOD) factor)*

factor					: (PLUS|MINUS)* factor
						: power

power					: atom (POW factor)*

atom					: INT|DOUBLE|STRING|IDENTIFIER
						: LPAREN expr RPAREN
						: list-expr

list-expr				: LSQUARE (expr (COMMA expr)*)? RSQUARE

body					: LCURLY statements RCURLY
						: expr SEMICOLON
						: SEMICOLON